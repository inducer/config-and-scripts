#! /usr/bin/env python3

import os
from pathlib import Path
import logging

logger = logging.getLogger(__name__)


def list_recursively(path):
    for child in path.iterdir():
        if child.is_dir():
            yield from list_recursively(child)
        else:
            yield child


def link_dotfiles(src, tgt):
    src = Path(src)
    tgt = Path(tgt)

    for child in list_recursively(src):
        assert not child.is_dir()

        if (child.name.endswith("~")
                or (child.name.startswith(".")
                    and child.name.endswith(".swp"))):
            continue

        tgt_child = tgt.joinpath(child.relative_to(src))

        if tgt_child.is_symlink():
            if tgt_child.readlink() == child:
                logger.debug("target '%s' is already what it should be", tgt_child)
                continue

            logger.info("target '%s' is a symlink, replacing", tgt_child)
            tgt_child.unlink()

        # iterates backward
        for p in tgt_child.parents:
            if p.is_symlink():
                logger.info("target parent '%s' is a symlink, replacing", p)
                p.unlink()

            if p == tgt:
                break

        if tgt_child.exists():
            raise RuntimeError(f"target '{tgt_child}' already exists")

        tgt_child.parent.mkdir(parents=True, exist_ok=True)
        tgt_child.symlink_to(child)


def main():
    import json
    import socket
    basedir = os.path.dirname(os.path.abspath(__file__))

    link_dotfiles(os.path.join(basedir, "dotfiles"), os.path.expanduser("~"))

    with open(os.path.join(basedir, "hostnames-to-subdirs.json")) as inf:
        hostnames_to_subdirs = json.load(inf)

    for subdir in hostnames_to_subdirs.get(socket.gethostname(), ()):
        link_dotfiles(os.path.join(basedir, subdir), os.path.expanduser("~"))


if __name__ == "__main__":
    logging.basicConfig(level="INFO")
    main()
